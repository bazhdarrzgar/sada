# Use the official Node.js 18 Alpine image for smaller size
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
# Copy only package files for better layer caching
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Optimize package manager installation with error handling
RUN \
  if [ -f yarn.lock ]; then \
    yarn --frozen-lockfile --production=false --prefer-offline; \
  elif [ -f package-lock.json ]; then \
    npm ci --prefer-offline; \
  elif [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm i --frozen-lockfile; \
  else \
    echo "❌ Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Copy dependencies from previous stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code (use .dockerignore to exclude unnecessary files)
COPY . .

# Disable Next.js telemetry during build and runtime
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application with optimizations
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  else echo "❌ No package manager lockfile found" && exit 1; \
  fi

# Production image - copy all the files and run next
FROM base AS runner
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV DOCKER_ENV=true

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy public assets with proper ownership
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Create .next directory with proper permissions
RUN mkdir .next && \
    chown nextjs:nodejs .next

# Create upload directory with proper permissions for file uploads
RUN mkdir -p ./public/upload && \
    chown -R nextjs:nodejs ./public/upload && \
    chmod -R 755 ./public/upload

# Create subdirectories for different types of uploads
RUN mkdir -p ./public/upload/{uploads,images,videos,documents} && \
    chown -R nextjs:nodejs ./public/upload && \
    chmod -R 755 ./public/upload

# Copy standalone output and static files with proper ownership
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set runtime environment variables
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check for container health monitoring
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000', (res) => { \
    if (res.statusCode === 200) process.exit(0); \
    else process.exit(1); \
  }).on('error', () => process.exit(1));"

# Start the application
CMD ["node", "server.js"]